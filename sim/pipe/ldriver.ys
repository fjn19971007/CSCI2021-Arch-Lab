#######################################################################
# Test for copying block of size 63;
#######################################################################
  .pos 0
main:  irmovq Stack, %rsp    # Set up stack pointer

  # Set up arguments for copy function and then invoke it
  irmovq $63, %rdx    # src and dst have 63 elements
  irmovq dest, %rsi  # dst array
  irmovq src, %rdi  # src array
  call ncopy     
  halt      # should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of negative words (<0) contained in src.
#
# Name: Jianan Fang
# X500: fangx205
# ID: 5180165
#
# Insert iaddq in the assembly code to improve the speed.
# Apply loop unrolling (4 iterations in one loop).
# Move jumps to right after subtracting from len.
# Use as less jump structures as possible
# Handle the remaining parts after loop
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion

# Loop header
    andq %rdx,%rdx          # len > 0?
    jg Loop                 # if so, goto Loop:
    ret                	    # else return

Loop:
    iaddq $-4, %rdx         # len -= 4
    jl T1                  # if len >= 0, goto T1
L1:
    mrmovq (%rdi), %r10     # read val1 from src
    mrmovq $8(%rdi), %r11   # read val2 from src+8
    mrmovq $16(%rdi), %r12  # read val3 from src+16
    mrmovq $24(%rdi), %r13  # read val4 from src+24
    rmmovq %r10, (%rsi)     # store val1 to dest
    rmmovq %r11, $8(%rsi)   # store val2 to dest+8
    rmmovq %r12, $16(%rsi)  # store val3 to dest+16
    rmmovq %r13, $24(%rsi)  # store val4 to dest+24
    andq %r10, %r10         # check val1 < 0?
    jge L2                  # if not, goto L2
    iaddq $1, %rax          # else count++
L2:
    andq %r11, %r11         # check val2 < 0?
    jge L3                  # if not, goto L3
    iaddq $1, %rax          # else count++
L3:
    andq %r12, %r12         # check val3 < 0?
    jge L4                  # if not, goto L4
    iaddq $1, %rax          # else count++
L4:
    andq %r13, %r13         # val4 < 0?
    jge Check               # if not, goto Check
    iaddq $1, %rax          # count++

Check:
    iaddq $32, %rdi         # src += 4
    iaddq $32, %rsi         # dest += 4
    iaddq $-4, %rdx         # len -= 4
    jge L1                  # if len >= 0, goto L1

T1:
    iaddq $3, %rdx          # len += 3
    jl Done                 # if len >= 0, goto T1
    mrmovq (%rdi), %r10     # read val1 from src
    mrmovq $8(%rdi), %r11   # read val2 from src+8
    rmmovq %r10, (%rsi)     # store val1 to dest
    andq %r10, %r10         # check val1 < 0?
    jge C1                 # if not, goto C1
    iaddq $1, %rax          # else count++
C1:
    iaddq $-1, %rdx         # len--
    jge T2                  # if len >= 0, goto T2
    ret                     # else return
T2:
    mrmovq $16(%rdi), %r10  # read val3 from src+16
    rmmovq %r11, $8(%rsi)   # store val2 to dest+8
    andq %r11, %r11         # check val2 < 0?
    jge C2                 # if not, goto C2
    iaddq $1, %rax          # else count++
C2:
    iaddq $-1, %rdx         # len--
    jge T3                  # if len >= 0, goto T3
    ret                     # else goto Done
T3:
    rmmovq %r10, $16(%rsi)  # store val3 to dest+16
    andq %r10, %r10         # check val3 < 0?
    jge Done                # if not, goto Done
    iaddq $1, %rax          # else count++


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
  ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
  .align 8
src:
	.quad -1
	.quad -2
	.quad -3
	.quad 4
	.quad 5
	.quad 6
	.quad 7
	.quad 8
	.quad 9
	.quad 10
	.quad -11
	.quad 12
	.quad 13
	.quad 14
	.quad 15
	.quad 16
	.quad -17
	.quad 18
	.quad -19
	.quad 20
	.quad -21
	.quad -22
	.quad -23
	.quad -24
	.quad 25
	.quad -26
	.quad -27
	.quad -28
	.quad -29
	.quad -30
	.quad 31
	.quad -32
	.quad 33
	.quad -34
	.quad -35
	.quad 36
	.quad 37
	.quad 38
	.quad -39
	.quad 40
	.quad 41
	.quad 42
	.quad 43
	.quad -44
	.quad 45
	.quad 46
	.quad 47
	.quad -48
	.quad -49
	.quad -50
	.quad -51
	.quad -52
	.quad 53
	.quad -54
	.quad -55
	.quad -56
	.quad -57
	.quad 58
	.quad 59
	.quad -60
	.quad 61
	.quad -62
	.quad -63
  .quad 0xbcdefa # This shouldn't get moved

  .align 16
Predest:
  .quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
  .quad 0xdefabc

.align 8
# Run time stack
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0
  .quad 0

Stack:
